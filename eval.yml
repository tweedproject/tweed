---
apiVersion: v1
kind: Namespace
metadata:
  name: ${NAMESPACE}
---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: tweed
  namespace: ${NAMESPACE}
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  name: tweed-broker
  namespace: ${NAMESPACE}
rules:
  - apiGroups: ["", "batch", "extensions", "apps", "autoscaling"]
    resources: ["*"]
    verbs:     ["*"]
---
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  name: tweed
  namespace: ${NAMESPACE}
subjects:
  - kind: ServiceAccount
    name: tweed
    namespace: ${NAMESPACE}
roleRef:
  kind: ClusterRole
  name: tweed-broker
  apiGroup: rbac.authorization.k8s.io
---
apiVersion: v1
kind: ConfigMap
metadata:
  name:      vault
  namespace: ${NAMESPACE}
data:
  local.json: |
    {
      "disable_mlock": 1,
      "backend": {
        "file": {
          "path": "/vault/file"
        }
      },
      "listener": {
        "tcp": {
          "address":     "0.0.0.0:8200",
          "tls_disable": 1
        },
      },
      "default_lease_ttl": "168h",
      "max_lease_ttl": "720h"
    }
---
apiVersion: v1
kind: ConfigMap
metadata:
  name:      tweed
  namespace: ${NAMESPACE}
data:
  tweed.yml: |
    prefix: ''

  skopeo.yml: |
    registry.hub.docker.com:
      tls-verify: true
      images:
        rkoster/mysql-tweed-stencil:
        - latest

  catalog.yml: |
    catalog:
      services:
        - name: MySQL
          id:   mysql
          description: |
            A standalone, single-node MySQL RDBMS
          metadata: {}
          tags: [mysql, shared]
          plans:
            - name: shared
              id:   shared
              description: |
                MySQL version 8.x
              tweed:
                infrastructure: k8s
                stencil: mysql-tweed-stencil:latest
                limit:  2
                config:
                  version: '8'
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name:      tweed
  namespace: ${NAMESPACE}
  labels:
    app:     tweed
    env:     eval
    version: alpha

spec:
  replicas: 1
  selector:
    matchLabels:
      app:     tweed
      env:     eval
      version: alpha
  template:
    metadata:
      labels:
        app:     tweed
        env:     eval
        version: alpha
    spec:
      serviceAccountName: tweed
      containers:
        - name:  vault
          image: vault:latest
          imagePullPolicy: Always
          env:
            - name:  VAULT_API_ADDR
              value: http://127.0.0.1:8200
          command:
            - vault
            - server
            - -config
            - /vault/config/local.json

          volumeMounts:
            - name: vault
              mountPath: /vault/config

        - name: registry
          image: registry:latest
          imagePullPolicy: Always
          command:
          - /bin/registry
          - serve
          - /etc/docker/registry/config.yml
          env:
          - name: REGISTRY_STORAGE_FILESYSTEM_ROOTDIRECTORY
            value: "/var/lib/registry"

        - name:  broker
          image: ${IMAGE}:${VERSION}
          imagePullPolicy: Always
          args:
          - --kubernetes-in-cluster
          - --kubernetes-namespace=${NAMESPACE}
          securityContext:
            privileged: true
          ports:
            - name: tweed
              containerPort: 80
          env:
            - name:  INIT_VAULT
              value: http://127.0.0.1:8200
            - name:  USE_THIS_KUBERNETES
              value: 'yes'
            - name:  TWEED_LISTEN
              value: ':80'
            - name:  TWEED_HTTP_USERNAME
              value: tweed
            - name:  TWEED_USERNAME
              value: tweed
            - name:  TWEED_HTTP_PASSWORD
              value: tweed
            - name:  TWEED_PASSWORD
              value: tweed
            - name:  TWEED_URL
              value: http://127.0.0.1:80

          volumeMounts:
            - name: tweed
              mountPath: /tweed/etc/config.d/provided

      volumes:
        - name: tweed
          configMap:
            name: tweed
        - name: vault
          configMap:
            name: vault
---
apiVersion: v1
kind: Service
metadata:
  name: tweed
  namespace: ${NAMESPACE}
  labels:
    app:     tweed
    env:     eval
    version: alpha
spec:
  type: NodePort
  ports:
    - name: tweed
      port: 80
      protocol: TCP
      targetPort: tweed
  selector:
    app:     tweed
    env:     eval
    version: alpha
